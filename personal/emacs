;; Set load-path

(setq load-path (cons "~/Linux-root/src/elisp" load-path))
;(setq load-path (cons "~/Linux-root/src/elisp/auto-complete-1.3.1" load-path))
(setq load-path (cons "~/.emacs.d/elpa/auto-complete-20161029.643" load-path))
(setq load-path (cons "~/Linux-root/src/elisp/cc-mode-5.32.1" load-path))
(setq load-path (cons "~/Linux-root/src/elisp/completion-ui" load-path))
(setq load-path (cons "~/Linux-root/src/elisp/color-theme-6.6.0" load-path))
(setq load-path (cons "~/Linux-root/src/elisp/color-theme-6.6.0/themes" load-path))
(setq load-path (cons "~/Linux-root/src/elisp/amdelisp-2007-01-20/elisp" load-path))
(setq load-path (cons "~/Linux-root/src/elisp/nxml-mode-20041004" load-path))
(setq load-path (cons "~/Linux-root/src/elisp/highlight-parentheses" load-path))
(setq load-path (cons "~/Linux-root/src/global-5.9.4" load-path))
(setq load-path (cons "~/Linux-root/src/elisp/tsgates-git-emacs-cfc65ce" load-path))

(modify-frame-parameters (selected-frame) '((alpha . 100)))

(require 'frame-cmds)

(electric-pair-mode 1)

;(require 'highlight-chars)

(require 'highlight-indentation)

;(global-highlight-indentation t)

(global-hl-line-mode 0)

;(require 'yasnippet)
;(setq yas-global-mode 1)

(set-frame-font "Monaco")
(set-face-attribute 'default nil :height 130)

(require 'smooth-scroll)
(smooth-scroll-mode t)

;; Auto-complete

(require 'auto-complete)
(require 'auto-complete-clang)
(global-auto-complete-mode t)

;(add-hook 'c++-mode-hook 'irony-mode)
;(add-hook 'c-mode-hook 'irony-mode)

;; replace the `completion-at-point' and `complete-symbol' bindings in
;; irony-mode's buffers by irony-mode's function
;(defun my-irony-mode-hook ()
;  (define-key irony-mode-map [remap completion-at-point]
;    'irony-completion-at-point-async)
;  (define-key irony-mode-map [remap complete-symbol]
;    'irony-completion-at-point-async))
;(add-hook 'irony-mode-hook 'my-irony-mode-hook)
;(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

;(eval-after-load 'company
;  '(add-to-list 'company-backends 'company-irony))

;; (optional) adds CC special commands to `company-begin-commands' in order to
;; trigger completion at interesting places, such as after scope operator
;;     std::|
;(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)


;;(setq ac-clang-executable "/usr/local/nestlabs-20130801-b8d59d2/toolchains/llvm/3.3/armv7m/bin/clang")

;(load-library "clang-completion-mode")
;(setq clang "/usr/local/nestlabs-20130801-b8d59d2/toolchains/llvm/3.3/armv7m/bin/clang")

;(require 'completion-ui)

;; Packages

(setq package-enable-at-startup nil)
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

;; Helm

(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
(setq projectile-indexing-method 'native)
(setq projectile-enable-caching t)
(setq projectile-use-git-grep 1)

;; Abbrev

(define-abbrev-table 'global-abbrev-table '(
    ("8dl"  "nlLogDebug(\"\\n\");")
    ("8dla" "nlLogDebug(\": 0x%lx\\n\", );")
    ("8dln" "nlLogDebug(\": %d\\n\", __LINE__);")
    ("8dt"  "nlLogDeclareFunctionTracer(tracer);")
    ("8rsa" "nlREQUIRE_SUCCESS_ACTION(, done, {  });")
    ("8mk"  "make BuildProduct=topaz BuildConfig=development")
    ("8p12" "Go all the way through 1st and 2nd device pairing")

    ("8do"
"//
// Begin Emacs abbrev-generated debugging header
//
// Replace XXXX with the prefix of your choice
//
// Wrap all debugging code in #if (XXXX_DEBUG > 0)/#endif, or:
//
// nlLogDebugXXXX_P0(...) for CRITICAL messages (will show up even if XXXX_DEBUG is 0)
// nlLogDebugXXXX_P1(...) for very important messages
// nlLogDebugXXXX_P2(...) for slightly important messages
// nlLogDeclareFunctionTracerXXXX_P1 for very important function traces
// nlLogDeclareFunctionTracerXXXX_P2 for slightly important function traces
//

#ifndef WEAVE_PLATFORM_DEBUG_XXXX
#define WEAVE_PLATFORM_DEBUG_XXXX

//
// Set XXXX_DEBUG to 1 for P1 debugging, 2 for P1 and P2 debugging
//
#define XXXX_DEBUG (0)

//
// Max length of log messages
//
#define XXXX_MAX_LOG_MSG_LEN (100)

//
// DO NOT MODIFY BELOW THIS LINE, other than to replace XXXX with your prefix
//

#if (XXXX_DEBUG == 1) && defined(BUILD_CONFIG_DEVELOPMENT)
nlDeclareDebugLogger(XXXX_P1, XXXX_MAX_LOG_MSG_LEN);
#define nlLogDeclareFunctionTracerXXXX_P1() nlLogDeclareFunctionTracer(tracer)
static inline void nlLogDebugXXXX_P2(const char *str, ...) {}
#define nlLogDeclareFunctionTracerXXXX_P2() {}
#elif (XXXX_DEBUG == 1) && defined(BUILD_CONFIG_RELEASE)
#define nlDeclareDebugLogger(LOGGER_PREFIX, MAXLEN)                     \\
    static void nlLogDebug##LOGGER_PREFIX(const char *str, ...) {       \\
        char prefixed_str [MAXLEN];                                     \\
        va_list vl;                                                     \\
        va_start(vl, str);                                              \\
        snprintf(prefixed_str, MAXLEN, #LOGGER_PREFIX \": %s\", str);\\
        vprintf(prefixed_str, vl);                                      \\
    }
nlDeclareDebugLogger(XXXX_P1, XXXX_MAX_LOG_MSG_LEN);
#define nlLogDeclareFunctionTracerXXXX_P1() printf(\"XXXX_P1: --> %s\", __PRETTY_FUNCTION__);
static inline void nlLogDebugXXXX_P2(const char *str, ...) {}
#define nlLogDeclareFunctionTracerXXXX_P2() {}
#elif (XXXX_DEBUG == 2) && defined(BUILD_CONFIG_DEVELOPMENT)
nlDeclareDebugLogger(XXXX_P1, XXXX_MAX_LOG_MSG_LEN);
#define nlLogDeclareFunctionTracerXXXX_P1() nlLogDeclareFunctionTracer(tracer)
nlDeclareDebugLogger(XXXX_P2, XXXX_MAX_LOG_MSG_LEN);
#define nlLogDeclareFunctionTracerXXXX_P2() nlLogDeclareFunctionTracer(tracer)
#elif (XXXX_DEBUG == 2) && defined(BUILD_CONFIG_RELEASE)
#define nlDeclareDebugLogger(LOGGER_PREFIX, MAXLEN)                     \\
    static void nlLogDebug##LOGGER_PREFIX(const char *str, ...) {       \\
        char prefixed_str [MAXLEN];                                     \\
        va_list vl;                                                     \\
        va_start(vl, str);                                              \\
        snprintf(prefixed_str, MAXLEN, #LOGGER_PREFIX \": %s\", str);\\
        vprintf(prefixed_str, vl);                                      \\
    }
nlDeclareDebugLogger(XXXX_P1, XXXX_MAX_LOG_MSG_LEN);
#define nlLogDeclareFunctionTracerXXXX_P1() printf(\"XXXX_P1: --> %s\", __PRETTY_FUNCTION__);
nlDeclareDebugLogger(XXXX_P2, XXXX_MAX_LOG_MSG_LEN);
#define nlLogDeclareFunctionTracerXXXX_P2() printf(\"XXXX_P2: --> %s\", __PRETTY_FUNCTION__);
#else
static inline void nlLogDebugXXXX_P1(const char *str, ...) {}
#define nlLogDeclareFunctionTracerXXXX_P1() {}
static inline void nlLogDebugXXXX_P2(const char *str, ...) {}
#define nlLogDeclareFunctionTracerXXXX_P2() {}
#endif

//
// Set this to 1 only if you intend to have any P0 logging
//
#define XXXX_ALLOW_P0_LOGGING (0)

#if XXXX_ALLOW_P0_LOGGING && !defined(nlDeclareDebugLogger)
#define nlDeclareDebugLogger(LOGGER_PREFIX, MAXLEN)                     \\
    static void nlLogDebug##LOGGER_PREFIX(const char *str, ...) {       \\
        char prefixed_str [MAXLEN];                                     \\
        va_list vl;                                                     \\
        va_start(vl, str);                                              \\
        snprintf(prefixed_str, MAXLEN, #LOGGER_PREFIX \": %s\", str);\\
        vprintf(prefixed_str, vl);                                      \\
    }
#endif

#if XXXX_ALLOW_P0_LOGGING
nlDeclareDebugLogger(XXXX_P0, XXXX_MAX_LOG_MSG_LEN);
#endif

#endif // WEAVE_PLATFORM_DEBUG_XXXX
//
// End Emacs abbrev-generated debugging header
//
")
    ))

;; stop asking whether to save newly added abbrev when quitting emacs
(setq save-abbrevs nil)

;; turn on abbrev mode globally
(setq abbrev-mode t)

;; Git

(require 'git-emacs)

(autoload 'git--update-all-state-marks "git-modeline" nil t)
  (add-hook 'find-file-hook 'git-status-in-modeline)
  (defun git-status-in-modeline ()
    (if (and vc-mode (string-match "^ Git" (substring-no-properties vc-mode)))
        (git--update-all-state-marks)))
(add-hook 'find-file-hook 'git-status-in-modeline t)

;; Bind-key

(require 'bind-key)

;; save our place when closing a file
(require 'saveplace)
(setq-default save-place t)

;; always revert buffers if their files change on disk to reflect new changes
(global-auto-revert-mode 1)

(menu-bar-mode 0)
(scroll-bar-mode -1)

;; Better tags

(defun rog-visit-tags-table ()
 "call visit-tags-table on TAGS if TAGS exists"
 (setq tags-table-list (list (getenv "BuildRoot")))
 (cond
  (
   (file-exists-p "TAGS")
   (visit-tags-table "TAGS"))
  )
 )
(load "abtags")
(load "etags-select")
;;(rog-visit-tags-table)
;;(setq tags-table-list (list (getenv "BuildRoot")))
;;(visit-tags-table "TAGS")

;; always revert buffers if their files change on disk to reflect new changes
(global-auto-revert-mode 1)

;; No startup screen

;;(setq startup-screen-inhibit-startup-screen t)
(setq inhibit-splash-screen t)

;; Use "pending delete" mode

(delete-selection-mode 1)

;; Merge emacs kill-ring with the clipboard

(setq x-select-enable-clipboard t)

;; Disable toolbar

(tool-bar-mode -1)

;; grep-command

(setq grep-command "grep --exclude *.d --exclude *.pd --exclude TAGS --exclude *.pbxproj -niIR \"\" $BuildRoot")

;; compile-command

(setq compile-command "cd $BuildRoot/sw/nestlabs/app/client; make BuildProduct=j49 BuildConfig=development OPTIMIZER='-O0 -g'")

(require 'savehist)
(savehist-mode 1)
(setq savehist-mode t)

;; Key bindings

(global-set-key (kbd "\C-x s") 'save-buffer)
(global-set-key (kbd "\C-z") 'undo)
(global-set-key (kbd "\C-x g") 'git-grep)
;(global-set-key (kbd "\C-x g") 'projectile-grep)
(global-set-key (kbd "\C-x c") 'compile)
;(global-set-key (kbd "\C-x C-b") 'electric-buffer-list)
(global-set-key (kbd "\C-x C-b") 'helm-mini)
(global-set-key (kbd "\C-x C-n") 'helm-bookmarks)
(global-set-key (kbd "\C-x r l") 'helm-bookmarks)
(global-set-key (kbd "\C-x /") 'bmkp-cycle)

(global-set-key (kbd "\C-x e") 'eval-buffer )
(global-set-key (kbd "\C-x f") 'grep-find )
(global-set-key (kbd "\C-x l") 'goto-line)
(global-set-key (kbd "\C-x i") 'indent-region)
(global-set-key (kbd "\C-x [") 'beginning-of-buffer)
(global-set-key (kbd "\C-x ]") 'end-of-buffer)
(global-set-key (kbd "\C-x m") 'maximize-frame)
;(global-set-key (kbd "\C-x r") 'revert-buffer)

(global-set-key (kbd "RET") 'newline-and-indent)
(global-set-key "\C-c\C-c" 'comment-region)
(global-set-key "\C-c\C-u" 'uncomment-region)

(global-set-key [(shift up)] 'backward-paragraph)
(global-set-key [(shift down)] 'forward-paragraph)
(global-set-key [(meta up)] 'backward-paragraph)
(global-set-key [(meta down)] 'forward-paragraph)

(global-set-key [(control right)] 'forward-word)
(global-set-key [(control left)] 'backward-word)
(global-set-key [(C-home)] 'backward-word)
(global-set-key [(C-end)] 'forward-word)

(global-set-key [f12] 'delete-other-windows)

(global-set-key (kbd "\C-x .") 'etags-select-find-tag-at-point)
;(global-set-key (kbd "\C-x .") 'projectile-find-tag)
(global-set-key (kbd "\C-x a") 'abtags-find-file)
;(global-set-key (kbd "\C-x a") 'projectile-find-file)
;(global-set-key (kbd "\C-x RET") 'tags-return)
(global-set-key "\M-z\M-o" 'abtags-find-next-file)
;(global-set-key (kbd "\C-x C-o") 'abtags-find-next-file)
;(global-set-key (kbd "\C-x C-o") 'projectile-find-other-file)
(bind-key "M-z" nil)
;(bind-key "M-z M-o" 'projectile-find-other-file)
(bind-key "M-z M-o" 'abtags-find-next-file)

(global-set-key (kbd "C-c m s") 'magit-status)
(global-set-key (kbd "C-c m c") 'magit-checkout-file)

(ffap-bindings)

;; Replace "yes or no" with y or n

(fset 'yes-or-no-p 'y-or-n-p)

;; Confirm before killing emacs

(defvar confirm-before-kill-emacs 1)

;; Enable auto-fill

(turn-on-auto-fill)
(setq comment-auto-fill-only-comments 1)
;(setq-default auto-fill-function 'do-auto-fill)

;; Backups

(defun make-backup-file-name (file-name)
 "Create the non-numeric backup file name for `file-name'."
 (require 'dired)
 (if (file-exists-p "/Users/rtinkoff/backups")
     (concat (expand-file-name "/home/rtinkoff/backups/")
	      (replace-regexp-in-string "/" "!" file-name))
   (concat file-name "~")))

(setq make-backup-file-name-function 'make-backup-file-name)

(setq backup-directory-alist '(("" . "/Users/rtinkoff/backups")))

(defun force-backup-of-buffer ()
 (let ((buffer-backed-up nil))
   (backup-buffer)))

(add-hook 'before-save-hook 'force-backup-of-buffer)

(setq make-backup-files t)
(setq backup-by-copying t)
(setq delete-old-versions t)
(setq kept-new-versions 6)
(setq kept-old-versions 2)
(setq version-control t)

;(require 'highlight-parentheses)
;(highlight-parentheses-mode)
;(require 'autopair)
;(autopair-global-mode)

(show-paren-mode t)

;; Disables Emacs' auto-backups altogether

;;(setq make-backup-files nil)

;; Deletes a tab composed of spaces all at once

(setq backward-delete-char-untabify-method 'hungry)

;; Line/Column mode

(setq column-number-mode nil)
(setq line-number-mode t)

;; Display current function name in modeline

(which-function-mode 1)

;; GDB

(setq gdb-command-name "/usr/local/nestlabs/toolchains/llvm/3.1/armv7m/bin/armv7m-none-eabi-gdb --annotate=3 $BuildRoot/results/topaz/apple/llvm-armv7m/3.1/development/sw/nestlabs/apps/shell/shell.elf")
(setq gdb-many-windows t)

;; Helper for compilation. Close the compilation window if
;; there was no error at all.
(defun compilation-exit-autoclose (status code msg)
  ;; If M-x compile exists with a 0
  (when (and (eq status 'exit) (zerop code))
    ;; then bury the *compilation* buffer, so that C-x b doesn't go there
    (bury-buffer)
    ;; and delete the *compilation* window
    (delete-window (get-buffer-window (get-buffer "*compilation*"))))
  ;; Always return the anticipated result of compilation-exit-message-function
  (cons msg code))
;; Specify my function (maybe I should have done a lambda function)
;;(setq compilation-exit-message-function 'compilation-exit-autoclose)

;; Colors

;(load "color-theme")
;(color-theme-initialize)
;(color-theme-renegade)
;(color-theme-aalto-light)
;(color-theme-goldenrod)
;(color-theme-jb-simple)
;(color-theme-arjen)
;(color-theme-alice-blue)
;(color-theme-charcoal-black)
;(color-theme-rog-charcoal-black)
;(color-theme-bharadwaj-slate)
;(color-theme-aliceblue)
;(color-theme-classic)
;(color-theme-clarity)
;(color-theme-jedit-grey)
;(color-theme-deep-blue)
;(color-theme-gray30)
;(color-theme-hober)
;(color-theme-midnight)
;(color-theme-jsc-light2)

;(load "color-theme-subdued")
;(load "color-theme-gruber-dark")
;(color-theme-subdued)
;(load "color-theme-cobalt")
;(color-theme-cobalt)
;(load "color-theme-mac-classic")
;(color-theme-mac-classic)
;(load "ample-zen-theme")
;(load "grandshell-theme")
;(load "underwater-theme")
;(load "deviant-theme")
;(load "ritchie-theme")
;(load "monokai-theme")
;(load "rog-monokai-theme")
;(load "professional-theme")
;(load "oldlace-theme")
;(load "flatui-theme")
;(load "leuven-theme")

;(load-theme 'apropospriate-light t)
;(load-theme 'apropospriate-dark t)
;(load-theme 'atom-one-dark t)
;(load-theme 'alect-dark t)
;(load-theme 'ample-zen t)
;(load-theme 'aurora t)
;(load-theme 'autumn-light t)
;(load-theme 'bliss t)
;(load-theme 'bubbleberry t)
;(load-theme 'basic t)
;(load-theme 'faff t)
;(load-theme 'green-phosphor t)
;(load-theme 'greymatters t)
;(load-theme 'eclipse t)
;(load-theme 'alect-light t)
(load-theme 'deeper-blue t)
;(load-theme 'cherry-blossom t)

(setq cycle-themes-theme-list
   '(leuven rog-monokai flatui))
(require 'cycle-themes)
    (cycle-themes-mode)

(setq ediff-split-window-function 'split-window-horizontally)

(defun xrog-remove-control-M ()
  "Remove ^M at end of line in the whole buffer."
  (interactive)
  (save-match-data
    (save-excursion
      (let ((remove-count 0))
        (goto-char (point-min))
        (while (re-search-forward (concat (char-to-string 13) "$") (point-max) t)
          (setq remove-count (+ remove-count 1))
          (replace-match "" nil nil))
        (message (format "%d ^M removed from buffer." remove-count))))))

;; Fix c-indenting

(set-default 'tab-width '4)
(set-default 'indent-tabs-mode 'nil)
(setq c-default-style "bsd" c-basic-offset 4)
(c-set-offset 'case-label '+)

(setq grep-scroll-output t)
(setq compilation-scroll-output t)

(setq mac-allow-anti-aliasing t)

(setq blink-cursor-mode nil)
(setq column-number-mode nil)
(setq compilation-window-height 20)
;(setq cursor-type (quote bar))
(set-default 'cursor-type 'bar)
(setq grep-window-height 20)
;(setq one-buffer-one-frame-mode nil nil (aquamacs-frame-setup))
(setq one-buffer-one-frame-mode nil)
(setq transient-mark-mode t)
(setq savehist-mode t)
(setq c-default-style "bsd" c-basic-offset 4)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(blink-cursor-mode nil)
 '(bmkp-last-as-first-bookmark-file "~/.emacs.d/bookmarks")
 '(case-fold-search t)
 '(compile-command "cd $BuildRoot; make flintstone-development")
 '(completion-ignore-case t t)
 '(custom-safe-themes
   (quote
    ("0dfa1f356bdb48aa03088d4034b90c65290eb4373565f52f629fdee0af92a444" "cc60d17db31a53adf93ec6fad5a9cfff6e177664994a52346f81f62840fe8e23" "7153b82e50b6f7452b4519097f880d968a6eaf6f6ef38cc45a144958e553fbc6" "e1994cf306356e4358af96735930e73eadbaf95349db14db6d9539923b225565" "55d31108a7dc4a268a1432cd60a7558824223684afecefa6fae327212c40f8d3" "4d80487632a0a5a72737a7fc690f1f30266668211b17ba836602a8da890c2118" default)))
 '(diary-entry-marker (quote font-lock-variable-name-face))
 '(emms-mode-line-icon-image-cache
   (quote
    (image :type xpm :ascent center :data "/* XPM */
static char *note[] = {
/* width height num_colors chars_per_pixel */
\"    10   11        2            1\",
/* colors */
\". c #358d8d\",
\"# c None s None\",
/* pixels */
\"###...####\",
\"###.#...##\",
\"###.###...\",
\"###.#####.\",
\"###.#####.\",
\"#...#####.\",
\"....#####.\",
\"#..######.\",
\"#######...\",
\"######....\",
\"#######..#\" };")))
 '(fci-rule-color "#f6f0e1")
 '(fringe-mode 6 nil (fringe))
 '(gnus-logo-colors (quote ("#0d7b72" "#adadad")) t)
 '(gnus-mode-line-image-cache
   (quote
    (image :type xpm :ascent center :data "/* XPM */
static char *gnus-pointer[] = {
/* width height num_colors chars_per_pixel */
\"    18    13        2            1\",
/* colors */
\". c #358d8d\",
\"# c None s None\",
/* pixels */
\"##################\",
\"######..##..######\",
\"#####........#####\",
\"#.##.##..##...####\",
\"#...####.###...##.\",
\"#..###.######.....\",
\"#####.########...#\",
\"###########.######\",
\"####.###.#..######\",
\"######..###.######\",
\"###....####.######\",
\"###..######.######\",
\"###########.######\" };")) t)
 '(helm-buffer-max-length 40)
 '(initial-frame-alist (quote ((fullscreen . maximized))))
 '(large-file-warning-threshold 100000000)
 '(linum-format (quote dynamic))
 '(package-selected-packages
   (quote
    (bookmark+ auto-complete-clang auto-complete-c-headers auto-complete company-irony repo magit helm-themes helm-projectile greymatters-theme green-phosphor-theme flx-ido faff-theme eclipse-theme cycle-themes cherry-blossom-theme bubbleberry-theme bliss-theme bind-key basic-theme autumn-light-theme aurora-theme atom-one-dark-theme apropospriate-theme ample-zen-theme alect-themes)))
 '(show-paren-mode t)
 '(split-height-threshold 0)
 '(tags-case-fold-search t)
 '(tool-bar-mode nil)
 '(vc-annotate-background "#f6f0e1")
 '(vc-annotate-color-map
   (quote
    ((20 . "#e43838")
     (40 . "#f71010")
     (60 . "#ab9c3a")
     (80 . "#9ca30b")
     (100 . "#ef8300")
     (120 . "#958323")
     (140 . "#1c9e28")
     (160 . "#3cb368")
     (180 . "#028902")
     (200 . "#008b45")
     (220 . "#077707")
     (240 . "#259ea2")
     (260 . "#358d8d")
     (280 . "#0eaeae")
     (300 . "#2c53ca")
     (320 . "#0000ff")
     (340 . "#0505cc")
     (360 . "#a020f0"))))
 '(vc-annotate-very-old-color "#a020f0"))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
